import{_ as s,o as a,c as e,a as l}from"./app.009ed2f4.js";const h=JSON.parse('{"title":"Get Started","description":"","frontmatter":{},"headers":[],"relativePath":"python/allure/quick-start.md"}'),t={name:"python/allure/quick-start.md"},n=l(`<h1 id="get-started" tabindex="-1">Get Started <a class="header-anchor" href="#get-started" aria-hidden="true">#</a></h1><p>To generate your first report you will need to go through just a few simple steps:</p><ol><li><a href="https://docs.qameta.io/allure-report/#_get_started" target="_blank" rel="noreferrer">Installing a commandline</a></li><li><a href="https://docs.qameta.io/allure-report/#_python" target="_blank" rel="noreferrer">install: allure-pytest</a></li><li>Generate JSON Data: To enable Allure listener to collect results during the test execution simply add <code>--alluredir</code> option and provide path to the folder where results should be stored. E.g.:</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--alluredir=./tmp/my_allure_results</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>OR</strong> <code>pytest.ini</code> config:</li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">addopts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> -sv --alluredir ./tmp/my_allure_results --clean-alluredir</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>Generate report from the results.</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">allure</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">serve</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./tmp/my_allure_results</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>OR</strong> generate local HTML files to <code>report</code> dir:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">allure</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">generate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./tmp/my_allure_results</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./report</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--clean</span></span>
<span class="line"></span></code></pre></div>`,10),o=[n];function r(p,c,i,d,u,y){return a(),e("div",null,o)}const _=s(t,[["render",r]]);export{h as __pageData,_ as default};
